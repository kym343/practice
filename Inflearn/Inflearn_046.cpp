#define _CRT_SECURE_NO_DEPRECATE
#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

// 46. 멀티태스킹(카카오 먹방 문제 변형)

// 현수의 컴퓨터는 멀티태스킹이 가능하다. 처리해야 할 작업이 N개 들어오면 현수의 컴퓨터는
// 작업을 1부터 N까지의 번호를 부여하고 처리를 다음과 같이 한다.
// 1) 컴퓨터는 1번 작업부터 순서대로 1초씩 작업을 한다.즉 각 작업을 1초만 작업하고 다음
// 작업을 하는 식이다.
// 2) 마지막 번호의 작업을 1초 했으면 다시 1번 작업으로 가서 다시 1초씩 후속 처리를 한다.
// 3) 처리가 끝난 작업은 작업 스케쥴에서 사라지고 새로운 작업은 들어오지 않는다.
// 그런데 현수의 컴퓨터가 일을 시작한 지 K초 후에 정전이 되어 컴퓨터가 일시적으로 멈추었
// 다.전기가 들어오고 나서 현수의 컴퓨터가 몇 번 작업부터 다시 시작해야 하는지 알아내는
// 프로그램을 작성하세요.

// 입력설명
// 첫 번째 줄에 작업의 개수 N(1<=N<=2,000)이 주어지고 그 다음 N줄에 걸쳐 각 작업을
// 처리하는데 걸리는 시간이 초단위로 주어진다.한 작업을 처리하는데 필요한 시간은 1, 000를
// 넘지 않는다.
// 마지막 줄에 정전이 발생한 시간 K(1 <= K <= 2,000,000)가 주어진다.

// 출력설명
// 첫 번째 줄에 몇 번 작업부터 다시 시작해야 하는지 작업 번호를 출력한다.
// 만약 더 이상 처리할 작업이 없다면 - 1를 출력한다.

// ex1)
// input
// 3
// 1
// 2
// 3
// 5

// output
// 3

// <입출력 설명>
// 0~1초 동안에 1번 작업을 처리한다.남은 시간은[0, 2, 3] 이다.
// 1~2초 동안 2번 작업을 처리한다.남은 시간은[0, 1, 3] 이다.
// 2~3초 동안 3번 작업을 처리한다.남은 시간은[0, 1, 2] 이다.
// 3~4초 동안 2번 작업을 처리한다(1번 작업은 다 처리했다).남은 시간은[0, 0, 2] 이다.
// 4~5초 동안 3번 작업을 처리한다.남은 시간은[0, 0, 1] 이다.
// 5초 후 정전이 발행했으므로 3번 작업을 해야 할 때 중단되었으므로, 전기가 돌아온 후로는
//  3번 작업부터 시작하면 된다.

int main(int argc, char** argv) {
	int test_case;
	int T;

	freopen("sample_input.txt", "r", stdin);

	cin >> T;

	for (test_case = 0; test_case < T; test_case++) {
		int N, K, i, pos = 0, sum = 0, res;

		scanf("%d", &N);
		int* a = new int[N];

		for (i = 0; i < N; i++) {
			scanf("%d", &a[i]);
			sum += a[i];
		}

		scanf("%d", &K);

		if (sum <= K) {
			printf("-1\n");
		}
		else {
			while (0 < K) {
				if (a[pos] != 0) {
					a[pos]--;
					K--;
				}

				pos++;
				if (pos == N)	pos -= N;
				while (a[pos] == 0) {
					pos++;
					if (pos == N)	pos -= N;
				}
			}
			printf("%d\n", pos + 1);
		}
		delete a;
	}


	return 0;//정상종료시 반드시 0을 리턴해야합니다.
}